// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ReceiptEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockHeight", Value.fromBigInt(BigInt.zero()));
    this.set("outcome", Value.fromString(""));
    this.set("predecessorId", Value.fromString(""));
    this.set("receiverId", Value.fromString(""));
    this.set("signerId", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReceiptEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReceiptEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReceiptEvent", id.toString(), this);
    }
  }

  static load(id: string): ReceiptEvent | null {
    return changetype<ReceiptEvent | null>(store.get("ReceiptEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHeight(): BigInt {
    let value = this.get("blockHeight");
    return value!.toBigInt();
  }

  set blockHeight(value: BigInt) {
    this.set("blockHeight", Value.fromBigInt(value));
  }

  get outcome(): string {
    let value = this.get("outcome");
    return value!.toString();
  }

  set outcome(value: string) {
    this.set("outcome", Value.fromString(value));
  }

  get predecessorId(): string {
    let value = this.get("predecessorId");
    return value!.toString();
  }

  set predecessorId(value: string) {
    this.set("predecessorId", Value.fromString(value));
  }

  get receiverId(): string {
    let value = this.get("receiverId");
    return value!.toString();
  }

  set receiverId(value: string) {
    this.set("receiverId", Value.fromString(value));
  }

  get signerId(): string {
    let value = this.get("signerId");
    return value!.toString();
  }

  set signerId(value: string) {
    this.set("signerId", Value.fromString(value));
  }
}

export class ExecutionOutcome extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockHash", Value.fromString(""));
    this.set("logs", Value.fromStringArray(new Array(0)));
    this.set("receiptIds", Value.fromStringArray(new Array(0)));
    this.set("tokensBurnt", Value.fromBigInt(BigInt.zero()));
    this.set("executorId", Value.fromString(""));
    this.set("status", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExecutionOutcome entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecutionOutcome must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecutionOutcome", id.toString(), this);
    }
  }

  static load(id: string): ExecutionOutcome | null {
    return changetype<ExecutionOutcome | null>(
      store.get("ExecutionOutcome", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value!.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get logs(): Array<string> {
    let value = this.get("logs");
    return value!.toStringArray();
  }

  set logs(value: Array<string>) {
    this.set("logs", Value.fromStringArray(value));
  }

  get receiptIds(): Array<string> {
    let value = this.get("receiptIds");
    return value!.toStringArray();
  }

  set receiptIds(value: Array<string>) {
    this.set("receiptIds", Value.fromStringArray(value));
  }

  get tokensBurnt(): BigInt {
    let value = this.get("tokensBurnt");
    return value!.toBigInt();
  }

  set tokensBurnt(value: BigInt) {
    this.set("tokensBurnt", Value.fromBigInt(value));
  }

  get executorId(): string {
    let value = this.get("executorId");
    return value!.toString();
  }

  set executorId(value: string) {
    this.set("executorId", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}

export class FunctionCallActionEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("method", Value.fromString(""));
    this.set("args", Value.fromBytes(Bytes.empty()));
    this.set("deposit", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FunctionCallActionEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FunctionCallActionEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FunctionCallActionEvent", id.toString(), this);
    }
  }

  static load(id: string): FunctionCallActionEvent | null {
    return changetype<FunctionCallActionEvent | null>(
      store.get("FunctionCallActionEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get method(): string {
    let value = this.get("method");
    return value!.toString();
  }

  set method(value: string) {
    this.set("method", Value.fromString(value));
  }

  get args(): Bytes {
    let value = this.get("args");
    return value!.toBytes();
  }

  set args(value: Bytes) {
    this.set("args", Value.fromBytes(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    return value!.toBigInt();
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }
}

export class FunctionCallPermissionEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("allowance", Value.fromBigInt(BigInt.zero()));
    this.set("receiverId", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FunctionCallPermissionEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FunctionCallPermissionEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FunctionCallPermissionEvent", id.toString(), this);
    }
  }

  static load(id: string): FunctionCallPermissionEvent | null {
    return changetype<FunctionCallPermissionEvent | null>(
      store.get("FunctionCallPermissionEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    return value!.toBigInt();
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get receiverId(): string {
    let value = this.get("receiverId");
    return value!.toString();
  }

  set receiverId(value: string) {
    this.set("receiverId", Value.fromString(value));
  }
}

export class TransferActionEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferActionEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransferActionEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransferActionEvent", id.toString(), this);
    }
  }

  static load(id: string): TransferActionEvent | null {
    return changetype<TransferActionEvent | null>(
      store.get("TransferActionEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class BlockEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BlockEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BlockEvent", id.toString(), this);
    }
  }

  static load(id: string): BlockEvent | null {
    return changetype<BlockEvent | null>(store.get("BlockEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestampNanosec(): BigInt | null {
    let value = this.get("timestampNanosec");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestampNanosec(value: BigInt | null) {
    if (!value) {
      this.unset("timestampNanosec");
    } else {
      this.set("timestampNanosec", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalsupply(): BigInt | null {
    let value = this.get("totalsupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalsupply(value: BigInt | null) {
    if (!value) {
      this.unset("totalsupply");
    } else {
      this.set("totalsupply", Value.fromBigInt(<BigInt>value));
    }
  }
}
